find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
source('~/Personal/Coursera/MachineLearning/Project/projectScratch.R')
baseGLM
baseTree
baseGLPPCA
baseGLMPCA
confusionMatrix(predict(baseGLM),pmlTrainT$classe)
myPred <- predict(baseGLM)
myPred <- predict(baseGLM$finalModel)
myPred <- predict(baseGLM,pmlTrainT)
confusionMatrix(myPred, pmlTrainT$classe)
str(myPred)
length(myPred)
baseGLM$finalModel
?ppredict
?predict
str(newGLM)
str(baseGLM)
predict.glm(baseGLM)
predict.glm(baseGLM,newdata=pmlTrainT)
predict.glmnet(baseGLM, newx = pmlTrainT)
?predict.glmnet
class(baseGLM)
myPred <- predict.glmnet(baseGLM, newx = pmlTrainT, type="link")
predict(baseGLM, type="response")
?glmnet
?glm
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
help(package = "AppliedPredictiveModeling")
sO <- data(segmentationOriginal)
library(AppliedPredictiveModeling)
sO <- data(segmentationOriginal)
str(sO)
head(segmentationOriginal)
str(segmentationOriginal)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
?helpText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
library(AppliedPredictiveModeling)
library(caret)
library(lattice)
library(ggplot2)
library(shiny)
help(package="AppliedPredictiveModeling")
data("GermanCredit")
str(GermanCredit)
data(diagnosis)
data(AlzheimerDisease)
str(diagnosis)
dim(diagnosis)
length(diagnosis)
Alzheimer <- cbind(predictors, diagnosis)
str(Alzheimer)
names(Alzheimer)
?cbind
?GermanCredit
help(package="caret")
help(package="AppliedPredictiveModeling")
install.packages("DWD")
data("segmentationData")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?radioButtons
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?train
?trainControl
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
data(diagnosis)
names(GermanCredit)
str(GermanCredit)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
help(library="shiny")
help(package="shiny")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?proc.time
?renderPrint
?printInput
?printOutput
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?switch
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?trControl
?trainControl
?train
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?formula
-TRUE
-FALSE
TRUE
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
splitter <- createDatapartition(Alzheimer$diagnosis,p=.7,list=FALSE)
splitter <- createDataPartition(Alzheimer$diagnosis,p=.7,list=FALSE)
trainAlz <- Alzheimer[splitter,]
testAlz <- Alzheimer[-splitter,]
head(splitter)
head(splitter(20))
head(splitter,20)
head(-splitter,20)
myTrain <- trainControl(method="cv",number=10)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainALZ)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainAlz)
mdl2 <- train(diagnosis~., method="glm", trControl=myTrain, data=trainAlz)
mdl2
warnings()
mdl2 <- train(diagnosis~., method="glm", family="binomial",trControl=myTrain, data=trainAlz)
mdl1
mdl2$finalModel
mdl2$times
?confusionMatrix
warnings()
names(Alzheimer)
?glm
mdl2 <- train(diagnosis~., method="glm", family=binomial(),trControl=myTrain, data=trainAlz)
mdl2
warnings
warnings()
str(diagnosis)
str(Alzheimer$diagnosis)
str(predictors)
str(Alzheimer)
defTrain <- trainControl()
mdl2a <- train(diagnosis~., method="glm", family=binomial(),trControl=defTrain, data=trainAlz)
warnings()
confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
confusionMatrix(predict(mdl1,testAlz),testAlz$diagnosis)
mdl2a <- train(diagnosis~., method="glm",trControl=defTrain, data=trainAlz)
mdl2a
mdl2
mdl3 <- train(diagnosis~., method="glmboost",trControl=myTrain, data=trainAlz)
mdl3
mdl4 <- train(diagnosis~., method="rf",trControl=myTrain, data=trainAlz)
mdl4
mdl4$times
mdl4$times$everything[3]
mdl4$times$everything[[3]
]
?rrenderText
?renderText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
tryPerf <- cbind(Alzheimer, diag2 = diagnosis)
names(tryPerf)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=diag2,trControl=myTrain)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=tryPerf,trControl=myTrain)
warnings()
mod5
?glmboost
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=trainAlz,trControl=myTrain)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?renderPrint
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl2$results
cm2 <- confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
cm2$overall
?reactive
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$results
mdl3$bestTune
mdl3$modelInfo
mdl3$modelInfo()
mdl3$pred
mdl3$resample$Accuracy
mean(mdl3$resample$Accuracy)
mdl3
mdl1$resample$Accuracy
mdl2$resample$Accuracy
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?resamples
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$resample$Kappa
mdl3$resample$Resample
?boxplot
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
library(shiny)
library(ggplot2)
library(lattice)
library(caret)
library(AppliedPredictiveModeling)
library(rpart)
library(stabs)
library(parallel)
library(mboost)
library(randomForest)
data("GermanCredit")
data(AlzheimerDisease)
Alzheimer <- cbind(diagnosis, predictors)
data("segmentationData")
set.seed(1415)
trainer <- createDataPartition(Alzheimer$diagnosis, p=.75, list=False)
trainer <- createDataPartition(Alzheimer$diagnosis, p=.75, list=FALSE)
trainAlz <- Alzheimer[trainer,]
testAlz <- Alzheimer[-trainer,]
myTrain <- trainControl("cv",number=10)
mdl1 <- train(diagnosis~., method="glm", data=Alzheimer, family=binomial(),trControl=myTrain)
set.seed(1415)
mdl1 <- train(diagnosis~., method="glm", data=Alzheimer, family=binomial(),trControl=myTrain)
mdl1
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl1
mdl1 <- train(diagnosis~., method="glm", data=trainAlz, family=binomial(),trControl=myTrain)
?selectInput
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl1
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
}
mdl1 <- train(diagnosis~., method="glm", data=trainAlz,trControl=myTrain)
mdl1
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
cm <- confusionMatrix(predict(mdl1,testAlz),testAlz$diagnosis)
cm
cm$overall
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?trainControl
?train
tryMe <- NULL
tryMe
tryMe <- "pca"
tryMe
?ifelse
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
av <- mdl1$resample$Accuracy
kv <- mdl1$resample$Kappa
trydf <- data.frame("score"=av,"type"=repeat("Accuracy",10))
?repeat
??repeat
?seq
trydf <- data.frame("score"=av,"type"=rep("Accuracy",length(av)))
trydf
trydf2 <- data.frame("score"=kv,"type"=rep("Kappa",length(kv)))
tryG <- rbind(trydf, trydf2)
tryG
libary(ggplot2)
library(ggplot2)
qplot(score, data=tryG, geom=geom_boxplot, facets=type~.)
qplot(score, data=tryG, geom="boxplot", facets=type~.)
?qplot
qplot(score, data=tryG, geom="boxplot")
str(tryG)
qplot("score", data=tryG, geom="boxplot")
qplot(score, data=tryG)
qplot(score, data=tryG, geom="dotplot")
qplot(score, data=tryG, geom="boxplot")
?bodplot
?boxplot
boxplot(tryG$score~tryG$type)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
function ()
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?ggplot
myplot <- ggplot(tryG, aes(score))
myplot
myplot <- myplot+geom_boxplot()
myplot
?geom_boxplot
myplot <- myplot+geom_boxplot(x=score)
myplot <- myplot+geom_boxplot(data=tryG,x=score)
myplot <- ggplot(tryG, aes(type,score))
myplot <- myplot + geom_boxplot()
myplot
myplot <- myplot + ggfacets(group~.)
myplot <- myplot + facet_grid(.~group)
myplot
library(lattice)
bwplot(tryG)
?bwplot
cbind(testG, "Value" = rep("value",dim(testG)[1]))
cbind(tryG, "Value" = rep("value",dim(tryG)[1]))
tryg <- cbind(tryG, "Value" = rep("value",dim(tryG)[1]))
myplot <- ggplot(tryG, aes(Value,score))
myplot <- myplot + geom_boxplot()
myplot
names(tryG)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
myplot <- myplot + geom_boxplot()
myplot
myplot <- ggplot(tryg, aes(Value,score))
myplot <- myplot + geom_boxplot()
myplot
myplot <- myplot + facet_grid(.~type)
myplot
myplot <- ggplot(tryg, aes(type,score),fill=type)
myplot <- myplot + geom_boxplot()
myplot
myplot <- ggplot(tryg, aes(type,score),colour=type)
myplot <- myplot + geom_boxplot()
myplot
myplot <- myplot + geom_boxplot(aes(fill=type))
myplot
myplot <- myplot + geom_boxplot(aes(fill=type)) + guides(fill=FALSE)
myplot
myplot <- myplot + labs(title="Resampling Accuracy by Measure",xlab="")
myplot
myplot <- myplot + labs(title="Resampling Accuracy by Measure",xlab="Measure")
myplot
myplot <- myplot + labs(title="Resampling Accuracy by Measure",x="Measure")
myplot
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
View(Alzheimer)
View(GermanCredit)
?GermanCredit
str(GermanCredit)
View(segmentationData)
unique(GermanCredit$ForeignWorker)
len(unique(GermanCredit$ForeignWorker))
length(unique(GermanCredit$ForeignWorker))
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl1$finalModel
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
library(devtools)
install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='jmmark',
token='4D517BFEB98A2D8D9971B9932EE6353C',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jmmark', token='4D517BFEB98A2D8D9971B9932EE6353C', secret='xoqwc99DL97DMhziMCpHbxsqmUfRiGoBNZAx0Pqy')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
library(slidify)
setwd("~/Personal/Coursera/DataProducts/Slidify")
author("dprod_pitch")
setwd("~/Personal/Coursera/DataProducts/Slidify/dprod_pitch")
slidify('index.Rmd')
library(knitr)
browsURL('index.html')
browseURL('index.html')
help(package="slidify")
